@page "/"
@using Infrastructure.Email
@using Infrastructure.Helpers
@using Infrastructure.ProjectSettings
@using NorthernIrelandPowerOutages.Counties
@using NorthernIrelandPowerOutages.Models
@using System.Text.Json
@using Infrastructure.Sms
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime JS
@inject ISmsSender SmsSender
@inject IEmailSender EmailSender
@implements IAsyncDisposable
@inject Microsoft.Extensions.Options.IOptionsSnapshot<PersonalSettings> PersonalSettings

<PageTitle>Home</PageTitle>

<div>Outages</div>
<div style="display: flex; gap: 1rem; flex-wrap: wrap;">
    @foreach (var kvp in countyOutages)
    {
        @* <div>@kvp.Key: @kvp.Value outage(s)</div> *@
        <div>@kvp.Key: @kvp.Value</div>
    }
</div>

<div style="height: 100vh; width: 100%;">

    <button @onclick="ToggleGeoJson" disabled="@isCalculatingCountyOutages">Toggle GeoJson</button>
    <button @onclick="ZoomIn">Zoom In</button>
    <button @onclick="ZoomOut">Zoom Out</button>
    <button @onclick="SendMessage">Send Message</button>
    <button @onclick="SendEmail">Send Email</button>

    <div id="map" style="height: 100vh; width: 100%;"></div>

    @if (showModal)
    {
        <div class="modal show d-block" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Marker Clicked</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <p>@googleMapPin.Name</p>
                        <p>@googleMapPin.Latitude</p>
                        <p>@googleMapPin.Longitude</p>
                    </div>
                </div>
            </div>
        </div>
    }
</div>



@code
{
    private IJSObjectReference? module;
    private DotNetObjectReference<Home> dotNetObjectReference;
    private int zoomLevel = 8;

    private bool showModal = false;
    private bool isCalculatingCountyOutages = true;

    private bool isCalculatingCountyOutagesStarted = false;
    private bool mapInitialised;
    private bool mapMarkersPlaced = false;

    private GoogleMapPin? googleMapPin;
    private CountyMatcher countyMatcher;

    private Dictionary<string, int> countyOutages =
    NorthernIrelandCounties.Counties.ToDictionary(county => county,
    _ => 0,
    StringComparer.OrdinalIgnoreCase);

    [Parameter]
    public Unit Percentage { get; set; } = Unit.Percentage;

    List<GoogleMapPin> markers = new();

    protected async override Task OnInitializedAsync()
    {
        countyMatcher = await CountyMatcher.Create();
        dotNetObjectReference = DotNetObjectReference.Create(this);

        var response = await Http.GetFromJsonAsync<FaultModel>("https://localhost:7146/faults");

        if (response is null)
        {
            return;
        }

        foreach (var outageMessage in response.OutageMessage)
        {
            if (!string.IsNullOrWhiteSpace(outageMessage.Point.Coordinates))
            {
                (double latitude, double longitude) = CoordinateHelpers.ConvertIrishGridToLatLon(outageMessage.Point.Easting, outageMessage.Point.Northing);

                markers.Add(new GoogleMapPin()
                {
                    Name = outageMessage.PostCode,
                    StatusMessage = outageMessage.StatusMessage,
                    Latitude = latitude,
                    Longitude = longitude,
                });
            }

        }

        mapInitialised = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Home.razor.js");
            return;
        }

        if (mapInitialised && !mapMarkersPlaced)
        {
            if (module == null)
            {
                return;
            }

            await module.InvokeVoidAsync("initMap", markers, dotNetObjectReference);
            mapMarkersPlaced = true;
        }

        if (!isCalculatingCountyOutagesStarted)
        {
            isCalculatingCountyOutagesStarted = true;
            foreach (var marker in markers)
            {
                await Task.Run(async () =>
                {
                    string countyName = countyMatcher.MatchCounties(marker.Longitude, marker.Latitude);

                    await InvokeAsync(() =>
                    {
                        if (!countyOutages.ContainsKey(countyName))
                        {
                            return;
                        }

                        if (!countyOutages.TryGetValue(countyName, out int count))
                        {
                            count = 0;
                        }

                        countyOutages[countyName] = count + 1;
                    });
                });
            }

            isCalculatingCountyOutages = false;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public void OnMarkerClicked(GoogleMapPin googleMapPin)
    {
        this.googleMapPin = googleMapPin;
        showModal = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private async Task ZoomIn() => await module.InvokeVoidAsync("zoomMap", 1);
    private async Task ZoomOut() => await module.InvokeVoidAsync("zoomMap", -1);
    private async Task ToggleGeoJson() => await module.InvokeVoidAsync("toggleGeoJson", countyOutages);
    
    public void SendMessage()
    {
        SmsSender.SendMessage(PersonalSettings.Value.PhoneNumber, "Test message");
    }

    public async void SendEmail()
    {
        await EmailSender.SendEmailAsync(PersonalSettings.Value.Email, "There is a power cut", "There is a disruption to the network");
    }

    public ValueTask DisposeAsync()
    {
        return ValueTask.CompletedTask;
    }
}