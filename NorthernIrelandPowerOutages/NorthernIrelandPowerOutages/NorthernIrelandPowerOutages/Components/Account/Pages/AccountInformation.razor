@page "/account/account-information"
@using Domain.Backend
@using Domain.Frontend
@using Infrastructure.Data
@using Microsoft.EntityFrameworkCore
@using NorthernIrelandPowerOutages.Models
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@inject AddressService.IAddressService AddressService
@inject GeocodeService.IGeocodeService GeocodeService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="container py-4">
    <div class="row justify-content-center">
        <div class="col-lg-8 col-md-10">

            <div class="card mb-4 rounded-top-0 border-top-0">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">Profile Details</h4>
                    <button class="btn btn-primary btn-sm" @onclick="NavigateToManageAccountDetails">Manage account</button>
                </div>
                <div class="card-body">
                    <div class="row mb-2">
                        <div class="col-sm-4 fw-bold text-muted">Name</div>
                        <div class="col-sm-8">Jack Hamilton</div>
                    </div>
                    <div class="row mb-2">
                        <div class="col-sm-4 fw-bold text-muted">Email</div>
                        <div class="col-sm-8">@authenticatedUser.Email</div>
                    </div>
                    <div class="row">
                        <div class="col-sm-4 fw-bold text-muted">Phone number</div>
                        <div class="col-sm-8">@authenticatedUser.PhoneNumber</div>
                    </div>
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-header bg-light d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">Favourite addresses</h4>
                    <button class="btn btn-primary btn-sm" @onclick="ManageAddresses">Manage addresses</button>
                </div>
                <div class="card-body">
                    @if (addresses.Count == 0)
                    {
                        <p class="text-center text-muted fst-italic">No addresses found.</p>
                    }
                    else
                    {
                        @foreach (var address in addresses)
                        {
                            <div class="card mb-3 bg-light custom-address-card">
                                <div class="card-body py-3">
                                    <div class="row mb-2">
                                        <div class="col-sm-4 fw-bold text-dark-emphasis">Building number</div>
                                        <div class="col-sm-8 text-dark">@address.StreetNumber</div>
                                    </div>
                                    <div class="row mb-2">
                                        <div class="col-sm-4 fw-bold text-dark-emphasis">Address line</div>
                                        <div class="col-sm-8 text-dark">@address.StreetName</div>
                                    </div>
                                    <div class="row mb-2">
                                        <div class="col-sm-4 fw-bold text-dark-emphasis">City</div>
                                        <div class="col-sm-8 text-dark">@address.City</div>
                                    </div>
                                    <div class="row mb-2">
                                        <div class="col-sm-4 fw-bold text-dark-emphasis">County</div>
                                        <div class="col-sm-8 text-dark">@address.County</div>
                                    </div>
                                    <div class="row">
                                        <div class="col-sm-4 fw-bold text-dark-emphasis">Postcode</div>
                                        <div class="col-sm-8 text-dark">@address.PostCode</div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>

        </div>
    </div>
</div>


@code {

    [Inject]
    private NavigationManager NavManager { get; set; }

    private ApplicationUser authenticatedUser; 
    private AddressUI addressInput = new();
    private List<AddressUI> addresses = new();

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        ClaimsPrincipal claimsPrincipal = authState.User;

        if (claimsPrincipal.Identity?.IsAuthenticated == true)
        {
            string? userId = claimsPrincipal.FindFirstValue(System.Security.Claims.ClaimTypes.NameIdentifier);

            if (userId is not null)
            {
                authenticatedUser = DbContext.Users.First(u => u.Id == userId);

                var favouriteAddressEntities = await DbContext.Users
                    .Where(u => u.Id == userId)
                    .SelectMany(u => u.FavouriteAddressPreferences) 
                    .Select(uap => uap.Address) 
                    .ToListAsync();

                if (favouriteAddressEntities is not null)
                {
                    this.addresses.AddRange(favouriteAddressEntities.Select(a => (AddressUI)a));
                }
            }
        }
    }

    private async Task DeleteAddress(int id)
    {
        await DeleteAddressFromDatabase(id);
        await DeleteUnusedAddressesFromDatabase();

        var addressToDelete = addresses.FirstOrDefault(a => a.Id == id);
        if (addressToDelete != null)
        {
            addresses.Remove(addressToDelete);
        }
    }

    private async Task DeleteAddressFromDatabase(int addressId)
    {
        ApplicationUser user = await DbContext.Users
            .Include(u => u.FavouriteAddressPreferences)
            .FirstAsync(u => u.Id == authenticatedUser.Id);

        var address = user.FavouriteAddressPreferences.FirstOrDefault(f => f.AddressId == addressId);
        if (address != null)
        {
            user.FavouriteAddressPreferences.Remove(address);
            await DbContext.SaveChangesAsync();
        }
    }

    private async Task DeleteUnusedAddressesFromDatabase()
    {
        var unusedAddresses = await DbContext.Addresses
            .Where(a => !a.FavouriteAddressPreferences.Any())
            .ToListAsync();

        DbContext.Addresses.RemoveRange(unusedAddresses);
        await DbContext.SaveChangesAsync();
    }

    private void ManageAddresses()
    {
        NavManager.NavigateTo("/address-management");
    }

    private void NavigateToManageAccountDetails(MouseEventArgs args)
    {
        NavManager.NavigateTo("/manage-details");
    }
}
