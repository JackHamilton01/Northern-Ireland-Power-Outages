@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Domain.Backend
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="login-container">
    <div class="login-card">
        <h1>Log in</h1>

        @* Status message for general errors (e.g., login failed) *@
        <StatusMessage Message="@errorMessage" />

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <h2 class="form-title">Use a local account to log in.</h2>
            <hr />
            <ValidationSummary class="text-danger mb-3" role="alert" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="Input.Email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger small" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                <label for="Input.Password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger small" />
            </div>

            <div class="form-check mb-3">
                <InputCheckbox @bind-Value="Input.RememberMe" id="Input.RememberMe" class="form-check-input darker-border-checkbox" />
                <label class="form-check-label" for="Input.RememberMe">Remember me</label>
            </div>

            <div class="d-grid gap-2 mb-3">
                <button type="submit" class="btn btn-primary btn-lg login-button">Log in</button>
            </div>

            <div class="login-links">
                <p>
                    <a href="Account/ForgotPassword">Forgot your password?</a>
                </p>
                <p>
                    @* <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a> *@
                </p>
                <p>
                    @* <a href="Account/ResendEmailConfirmation">Resend email confirmation</a> *@
                    <a href="/">Continue as guest</a>
                </p>
            </div>
        </EditForm>
    </div>
</div>

<style>
    .login-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: calc(100vh - 120px); /* Adjust based on header/footer height */
    padding: 20px; /* Add some padding on smaller screens */
    background-color: #f8f9fa; /* Light background for the page */
}

.login-card {
    background-color: #ffffff;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1); /* Soft shadow */
    width: 100%;
    max-width: 450px; /* Limit width for larger screens */
    margin: auto; /* Center horizontally if not using flex directly */
}

.login-card h1 {
    text-align: center;
    color: #343a40; /* Darker heading color */
    margin-bottom: 25px;
    font-weight: 600;
}

.login-card .form-title {
    text-align: center;
    color: #555;
    font-size: 1.25rem; /* Slightly smaller than h1 */
    margin-bottom: 20px;
}

.login-card hr {
    margin-top: 15px;
    margin-bottom: 25px;
    border-top: 1px solid #dee2e6; /* Lighter hr */
}

/* Custom style for the "Remember me" checkbox border if needed */
.form-check-input.darker-border-checkbox {
    border: 1px solid #6c757d; /* A bit darker border than default Bootstrap */
}

.login-button {
    font-weight: bold;
    letter-spacing: 0.5px;
}

.login-links p {
    margin-bottom: 8px; /* Reduce space between links */
    text-align: center;
}

.login-links a {
    color: #007bff; /* Bootstrap primary blue for links */
    text-decoration: none; /* Remove underline by default */
}

.login-links a:hover {
    text-decoration: underline; /* Add underline on hover */
}

/* Optional: Make status message more distinct */
.status-message {
    padding: 10px 15px;
    margin-bottom: 20px;
    border-radius: 5px;
    font-weight: 500;
}

.status-message.error {
    background-color: #f8d7da; /* Light red */
    color: #721c24; /* Dark red */
    border: 1px solid #f5c6cb;
}
</style>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
