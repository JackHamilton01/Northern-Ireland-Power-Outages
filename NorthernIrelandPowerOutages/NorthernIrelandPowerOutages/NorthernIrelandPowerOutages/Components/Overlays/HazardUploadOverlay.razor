@using GeocodeService
@using Infrastructure.Data
@using NorthernIrelandPowerOutages.Components.Account.Shared
@inject IConfiguration config
@inject ApplicationDbContext DbContext
@inject IGeocodeService GeocodeService

<div class="modal-overlay">
    <div class="modal-dialog-centered">
        <div class="modal-content-custom">
            <div class="modal-header-custom">
                <h5 class="modal-title-custom">Hazard Upload</h5>
                <button type="button" class="btn-close-custom" @onclick="CloseOverlay" aria-label="Close"></button>
            </div>
            <div class="modal-body-custom">

                <EditForm Model="@hazardInput" OnValidSubmit="SaveHazard" FormName="hazardForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger mb-3" />

                    <div class="form-floating mb-3">
                        <InputText id="title" class="form-control" @bind-Value="hazardInput.Title" placeholder="Hazard Title" />
                        <label for="title">Title</label>
                        <ValidationMessage For="() => hazardInput.Title" class="text-danger small" />
                    </div>

                    <div class="form-floating mb-3">
                        <InputTextArea id="description" class="form-control" @bind-Value="hazardInput.Description" placeholder="Description of the hazard" style="height: 100px;" />
                        <label for="description">Description</label>
                        <ValidationMessage For="() => hazardInput.Description" class="text-danger small" />
                    </div>

                    <div class="mb-3">
                        <label for="hazardImages" class="form-label">Images</label>
                        <InputFile id="hazardImages" OnChange="@UploadHazards" accept=".png,.jpg,.jpeg" disabled="@(!isMaxNumberOfImages)" class="form-control" />
                    </div>

                    @if (uploadedImages.Any())
                    {
                        <div class="image-previews-container mb-3">
                            @foreach (var image in uploadedImages)
                            {
                                <div class="image-preview-item">
                                    <img src="@image.PreviewUrl" class="img-thumbnail" alt="Hazard image preview" />
                                    <button type="button" class="btn btn-danger btn-sm remove-image-btn" @onclick="@(() => RemoveImage(image))">
                                        <i class="bi bi-x-lg"></i>
                                    </button>
                                </div>
                            }
                        </div>
                    }

                    <div class="d-grid gap-2 mt-4">
                        <button class="btn btn-primary btn-lg" type="submit" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            }
                            else
                            {
                                <i class="bi bi-save">Save Hazard</i>
                            }
                        </button>
                    </div>

                </EditForm>

                @if (errors.Any())
                {
                    <div class="mt-3">
                        <h5 class="text-danger">Errors</h5>
                        <ul class="text-danger list-unstyled">
                            @foreach (var error in errors)
                            {
                                <li><i class="bi bi-exclamation-triangle-fill"></i> @error</li>
                            }
                        </ul>
                    </div>
                }

                @* <img src="@CreateWebPath(hazardInput.FileName)" width="400" /> *@

                @if (!string.IsNullOrEmpty(response))
                {
                    <div class="mt-3">
                        <p class="text-muted small" style="max-width: 100%;">
                            Response: @response
                        </p>
                    </div>
                }

            </div>
            <div class="modal-footer-custom">
                <button type="button" class="btn btn-secondary" @onclick="CloseOverlay">Close</button>
            </div>
        </div>
    </div>
</div>

<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0,0,0,0.5);
        z-index: 1040;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 15px; /* Added for small screen padding */
        overflow-y: auto; /* Enable scrolling for content if it overflows */
    }

    .modal-dialog-centered {
        display: flex;
        align-items: center;
        min-height: calc(100vh - 30px); /* Account for padding */
        width: 100%;
    }

    .modal-content-custom {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        max-width: 550px; /* Adjusted max width for better form presentation */
        width: 100%;
        margin: auto; /* Center content within modal-dialog-centered */
        display: flex;
        flex-direction: column;
        max-height: calc(100vh - 60px); /* Limit height to prevent content overflow outside screen */
    }

    .modal-header-custom {
        padding: 1.25rem 1.5rem;
        border-bottom: 1px solid #dee2e6;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-title-custom {
        margin-bottom: 0;
        font-size: 1.75rem;
        color: #343a40;
    }

    .btn-close-custom {
        background: none;
        border: none;
        font-size: 1.5rem;
        color: #6c757d;
        cursor: pointer;
        padding: 0.25rem 0.5rem;
        border-radius: 0.25rem;
        line-height: 1;
        opacity: 0.75;
        transition: opacity 0.15s ease-in-out;
    }

        .btn-close-custom:hover {
            opacity: 1;
            background-color: rgba(0,0,0,0.05);
        }

    .modal-body-custom {
        padding: 1.5rem;
        overflow-y: auto; /* Allow scrolling within body if content is long */
    }

    .modal-footer-custom {
        padding: 1rem 1.5rem;
        border-top: 1px solid #dee2e6;
        display: flex;
        justify-content: flex-end;
        align-items: center;
    }

    .image-previews-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
        justify-content: center;
    }

    .image-preview-item {
        position: relative;
        border: 1px solid #e0e0e0;
        border-radius: 5px;
        overflow: hidden;
        padding: 5px;
        background-color: #f9f9f9;
    }

        .image-preview-item img {
            width: 100px; /* Smaller preview images */
            height: 100px;
            object-fit: cover;
            display: block;
            border-radius: 3px;
        }

    .remove-image-btn {
        position: absolute;
        top: 0px;
        right: 0px;
        border-radius: 0 0 0 5px;
        background-color: rgba(220, 53, 69, 0.8);
        color: white;
        padding: 2px 6px;
        line-height: 1;
        font-size: 0.75rem;
        border: none;
    }

        .remove-image-btn:hover {
            background-color: rgba(220, 53, 69, 1);
        }
</style>
